{"version":3,"sources":["services/utils.js","services/Todo.js","services/storageService.js","services/TodoService.js","components/TodoPreview.js","components/TodoList.js","components/TodoFilter.js","pages/TodoApp.js","components/TodoDetails.js","pages/TodoPage.js","components/TodoForm.js","pages/TodoAdd.js","pages/TodoEdit.js","App.js","serviceWorker.js","index.js"],"names":["getRandomID","letters","id","i","ind","Math","floor","random","length","getFormattedDate","Date","toLocaleDateString","getFormattedTime","date","hours","getHours","minutes","getMinutes","ampm","Todo","title","content","this","utils","time","store","key","any","localStorage","JSON","stringify","load","str","parse","getTodos","filterBy","Promise","resolve","gTodos","filter","todo","includes","editTodo","find","map","storageService","deleteTodo","currTodo","getTodoById","TodoId","addTodo","newTodo","todos","createTodos","TodoPreview","props","to","className","src","width","height","alt","onClick","onDelete","TodoList","TodoFilter","changeInput","ev","field","target","name","value","type","onSetFilter","placeholder","onChange","Component","TodoApp","state","loadTodos","todoService","then","setState","prevState","history","push","TodoDetails","goBack","TodoPage","loadTodo","prevProps","match","params","TodoForm","onSave","catch","inputChange","fieldName","fieldValue","setFormatDataForEdit","TodoAdd","onAddTodo","TodoEdit","onEditTodo","createBrowserHistory","App","component","path","exact","React","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.4b42be00.chunk.js","sourcesContent":["export default {\r\n    getRandomID,\r\n    getFormattedDate,\r\n    getFormattedTime\r\n}\r\n\r\nfunction getRandomID() {\r\n    let letters = '1234567890poiiytreqwasdfghjklmnbvcxxssersgyushquiz';\r\n    let id = '';\r\n    for (let i = 0; i < 10; i++) {\r\n        let ind = Math.floor(Math.random() * letters.length)\r\n        id += letters[ind];\r\n    }\r\n    return id;\r\n}\r\n\r\nfunction getFormattedDate(){\r\n    let date = new Date().toLocaleDateString(\"en-US\");\r\n    return date;\r\n}\r\n\r\nfunction getFormattedTime(){\r\n  var date = new Date();  \r\n  var hours = date.getHours();\r\n  var minutes = date.getMinutes();\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n}\r\n\r\n\r\n\r\n","import utils from './utils.js';\r\nexport default class Todo{\r\n    constructor(title, content){\r\n        this.title = title;\r\n        this.content = content;\r\n        this.date = utils.getFormattedDate();\r\n        this.time = utils.getFormattedTime();\r\n        this.id = utils.getRandomID();\r\n    }\r\n}","\r\n\r\nfunction store(key, any) {\r\n    localStorage[key] = JSON.stringify(any);\r\n}\r\n\r\nfunction load(key) {\r\n    var str = localStorage[key] || 'null';\r\n    return JSON.parse(str);\r\n}\r\n\r\nexport default{\r\n    store,\r\n    load\r\n}","import Todo from './Todo.js';\r\nimport storageService from '../services/storageService.js';\r\n\r\nexport default {\r\n    getTodos,\r\n    editTodo,\r\n    deleteTodo,\r\n    getTodoById,\r\n    addTodo\r\n}\r\n\r\nlet gTodos = storageService.load('todos') || createTodos() ;\r\n\r\nfunction createTodos() {\r\n    const todos =  [\r\n        new Todo('To finish homework', 'finish this React app'),\r\n        new Todo('To convert this app', 'To convert this app to Angular app'),\r\n        new Todo('Create another app', 'to create full stack app'),\r\n        new Todo('Support mobile', 'if this app not supports mobile, create some media queries')\r\n    ]\r\n    storageService.store('todos', todos)\r\n    return todos;\r\n}\r\n\r\nfunction getTodoById(TodoId) {\r\n    const todo = gTodos.find(todo => todo.id === TodoId)\r\n    return Promise.resolve(todo)\r\n}\r\n\r\nfunction editTodo(id,title, content) {\r\n    let editTodo = gTodos.find(todo => todo.id === id)\r\n    editTodo = { ...editTodo, title, content };\r\n    gTodos = gTodos.map(todo => editTodo.id === todo.id ? editTodo : todo);\r\n    storageService.store('todos', gTodos)\r\n    return Promise.resolve(editTodo)\r\n}\r\n\r\nfunction getTodos(filterBy) {\r\n    if (filterBy) return Promise.resolve(gTodos.filter(todo => {\r\n        return todo.title.includes(filterBy.title)\r\n    }))\r\n    return Promise.resolve([...gTodos]);\r\n}\r\n\r\nfunction addTodo(title, content) {\r\n    const newTodo = new Todo(title, content);\r\n    gTodos = [...gTodos, newTodo];\r\n    storageService.store('todos', gTodos)\r\n    return Promise.resolve(newTodo);\r\n}\r\n\r\nfunction deleteTodo(todo) {\r\n    gTodos = gTodos.filter((currTodo) => currTodo.id !== todo.id)\r\n    storageService.store('todos', gTodos)\r\n    return Promise.resolve(true)\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function TodoPreview(props) {\r\n    return (\r\n        <Link to={`/todos/${props.todo.id}`}>\r\n            <li className=\"todo-preview\">\r\n                <div className=\"todo-line\">\r\n                    <div className=\"todo-title-preview\">⭕ {props.todo.title}</div>\r\n                    <Link to={`/todos/${props.todo.id}/edit`}>\r\n                        <button className=\"edit-button\"><img src=\"https://res.cloudinary.com/dtwqtpteb/image/upload/v1582406346/zwvointr6yjve95cf4bw.png\"\r\n                            width=\"23\" height=\"23\" alt=\"trash\" /></button>\r\n                    </Link>\r\n                    <button className=\"trash-button\"><img src=\"https://res.cloudinary.com/dtwqtpteb/image/upload/v1582404089/qqj9fcfqjjtphfiye2u2.png\"\r\n                        width=\"23\" height=\"23\" alt=\"trash\"\r\n                        onClick={() => { props.onDelete(props.todo) }} />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        </Link>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport TodoPreview from '../components/TodoPreview.js';\r\n\r\nexport default function TodoList(props) {\r\n    return <ul className=\"list\">\r\n        {props.todos.map((todo, i) =>\r\n         <TodoPreview key={i} todo={todo} \r\n       onDelete={props.onDelete}>\r\n        </TodoPreview>\r\n        )\r\n        }\r\n    </ul>\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoFilter extends Component {\r\n\r\n    changeInput = (ev) => {\r\n        const field = ev.target.name;\r\n        let value = (ev.target.type === 'number') ? +ev.target.value : ev.target.value\r\n        this.props.onSetFilter({ [field]: value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"search-todo\">\r\n                <input type=\"text\" \r\n                    name=\"title\" placeholder=\"Search by title\"\r\n                    value={this.props.filterBy.title}\r\n                    onChange={this.changeInput} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport todoService from '../services/TodoService.js';\r\nimport TodoList from '../components/TodoList.js';\r\nimport TodoFilter from '../components/TodoFilter.js';\r\n\r\nexport default class TodoApp extends Component {\r\n\r\n    state = {\r\n        todos: [],\r\n        filterBy: {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTodos();\r\n    }\r\n\r\n    loadTodos = () => {\r\n        todoService.getTodos(this.state.filterBy).then((todos) => {\r\n            this.setState({ todos });\r\n        })\r\n    }\r\n\r\n    onSetFilter = (filterBy) => {\r\n        this.setState(prevState => ({\r\n            filterBy:\r\n                { ...prevState.filterBy, ...filterBy }\r\n        }), this.loadTodos);\r\n    }\r\n\r\n    onDelete = (todo) => {\r\n        todoService.deleteTodo(todo).then(() => {\r\n            this.props.history.push('/todos');\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-list-container\">\r\n                <h1 className=\"todo-title\">Todo List</h1>\r\n                <div className=\"buttons-container\">\r\n\r\n                    <Link to={`/addTodo`}>\r\n                        <button className=\"add-todo\">+</button>\r\n                    </Link>\r\n                    <TodoFilter filterBy={this.state.filterBy}\r\n                        onSetFilter={this.onSetFilter}></TodoFilter>\r\n                </div>\r\n                <TodoList todos={this.state.todos} onDelete={this.onDelete}></TodoList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import TodoPreview from '../components/TodoPreview.js';\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class TodoDetails extends Component {\r\n\r\n    render() {\r\n        const { todo } = this.props;\r\n        return (\r\n            <div className=\"todo-list-container\">\r\n                <button onClick={this.props.goBack} className=\"app-button\">Back</button>\r\n                <div className=\"todo-title-details \">{todo.title}</div>\r\n                <div className=\"date-and-time-details-container\">\r\n                    <div className=\"todo-date-details\"> {todo.date}</div>\r\n                    <div className=\"todo-time-details\">{todo.time}</div>\r\n                </div>\r\n                <div className=\"todo-content-details\">{todo.content}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport todoService from '../services/TodoService.js';\r\nimport TodoDetails from '../components/TodoDetails.js';\r\n\r\nexport default class TodoPage extends Component {\r\n\r\n    state = {\r\n        todo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTodo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params.id\r\n            !== this.props.match.params.id) {\r\n            this.loadTodo();\r\n        }\r\n    }\r\n\r\n    loadTodo() {\r\n        const { id } = this.props.match.params;\r\n        todoService.getTodoById(id).then(todo => {\r\n            this.setState({ todo })\r\n        })\r\n    }\r\n\r\n    goBack = () => {\r\n        this.props.history.push('/todos')\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.todo) return <div className=\"loading\">Loading...</div>\r\n        return <TodoDetails todo={this.state.todo} goBack={this.goBack}/>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport utils from '../services/utils.js';\r\n\r\nexport default class TodoForm extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        date: utils.getFormattedDate(),\r\n        time: utils.getFormattedTime()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setFormatDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.todo !== this.props.todo)\r\n            this.setFormatDataForEdit();\r\n    }\r\n\r\n    setFormatDataForEdit() {\r\n        const { todo } = this.props;\r\n        if (todo) {\r\n            this.setState({ title: todo.title, content: todo.content })\r\n        }\r\n    }\r\n\r\n    onSave = () => {\r\n        this.props.onSave(this.state.title, this.state.content).catch();\r\n        this.setState({ title: '', content: '' });\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let fieldValue = ev.target.value;\r\n        this.setState({ [fieldName]: fieldValue });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-container\">\r\n                <input type=\"text\" placeholder=\"title\" name=\"title\"\r\n                    onChange={this.inputChange} value={this.state.title}></input>\r\n                <input type=\"text\" placeholder=\"content\" name=\"content\"\r\n                    onChange={this.inputChange} value={this.state.content}></input>\r\n                <div className=\"form-buttons\">\r\n                    <button onClick={this.props.goBack} className=\"app-button\">\r\n                        Back </button>\r\n                    <button onClick={this.onSave} className=\"app-button space-left\">Save</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport todoService from '../services/TodoService.js';\r\nimport TodoForm from '../components/TodoForm.js';\r\n\r\nexport default class TodoAdd extends Component {\r\n\r\n    onAddTodo = (title, content) =>{\r\n        return todoService.addTodo(title, content).then(todo =>{\r\n            this.props.history.push('/todos');\r\n        })\r\n    }\r\n\r\n    goBack = () => {\r\n        this.props.history.push('/todos')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-list-container\">\r\n                <TodoForm onSave={this.onAddTodo}  goBack={this.goBack}></TodoForm>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport TodoForm from '../components/TodoForm.js';\r\nimport todoService from '../services/TodoService.js';\r\n\r\nexport default class TodoEdit extends Component {\r\n\r\n    state = {\r\n        todo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTodo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params.id\r\n            !== this.props.match.params.id) {\r\n            this.loadTodo();\r\n        }\r\n    }\r\n\r\n    loadTodo() {\r\n        todoService.getTodoById(this.props.match.params.id).then(todo => {\r\n            this.setState({ todo });\r\n        })\r\n    }\r\n\r\n    onEditTodo = (title, content) =>{\r\n        return todoService.editTodo(this.state.todo.id, title, content).then(todo =>{\r\n            this.props.history.push('/todos/' + todo.id);\r\n        })\r\n    }\r\n\r\n    goBack = () => {\r\n        this.props.history.push('/todos')\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.todo) return <div className=\"loading\">Loading...</div>\r\n        return (\r\n            <div className=\"todo-list-container\">\r\n                <TodoForm todo={this.state.todo} onSave={this.onEditTodo}  goBack={this.goBack}></TodoForm>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport global from '../src/assets/styles/global.scss';\nimport TodoApp from '../src/pages/TodoApp.js';\nimport TodoPage from '../src/pages/TodoPage.js';\nimport TodoAdd from '../src/pages/TodoAdd.js';\nimport TodoEdit from '../src/pages/TodoEdit.js';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nconst history=createBrowserHistory();\n\nclass App extends React.Component {\n\n    render() {\n        return (\n          <div className=\"main-container\">\n            <main>\n                <Router history={history}>\n                    <Switch>\n                        <Route component={TodoApp} path=\"/\" exact></Route>\n                        <Route component={TodoApp} path=\"/todos\" exact></Route>\n                        <Route component={TodoPage} path=\"/todos/:id\" exact></Route>\n                        <Route component={TodoAdd} path=\"/addTodo\" exact></Route>\n                        <Route component={TodoEdit} path=\"/todos/:id/edit\" exact></Route>\n                    </Switch>\n                </Router>\n            </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}